#!/usr/bin/env python

import numpy as np
from scipy.io import loadmat
import matplotlib.pyplot as plt
from mayavi import mlab

from chebpy import cheb_barycentric_matrix
from scftpy import SCFTConfig

def vis_slab3d():
    '''
        Visualize 3D data generated by SlabXX3D, here XX represents the polymer
        model, e.g. XX = AB stands for A-B diblock copolymers.
    '''
    param_file = 'param.ini'
    data_file = 'scft_out'
    is_show = True
    is_save = False

    config = SCFTConfig.from_file(param_file)
    Nx, Ny, Nz = config.grid.Lx, config.grid.Ly, config.grid.Lz
    Lx, Ly, Lz = config.uc.a, config.uc.b, config.uc.c
    print Nx, Ny, Nz
    print Lz, Ly, Lz

    mat = loadmat(data_file)
    phiA = mat['phiA']
    phiB = mat['phiB']
    phiAB = phiA - phiB

    if not (Nx, Ny, Nz) == phiA.shape:
        raise 'Data file does not match param file.'

    Nzp = 64 # display grid in z direction
    
    # Periodic in x and y directions, Fourier
    # Non-periodic in z direction, Chebyshev
    ii = np.arange(Nz)
    zz = np.cos(ii * np.pi / (Nz-1))
    zz = 0.5 * (1. + zz) * Lz
    zzp = np.linspace(0, Lz, Nzp)
    xp, yp, zp = np.mgrid[0:Lx*(1-1./Nx):Nx*1j, 
                          0:Ly*(1-1./Ny):Ny*1j, 
                          0:Lz:Nzp*1j]
    phiAp = cheb_interp3d_z(phiA, zzp)
    phiBp = cheb_interp3d_z(phiB, zzp)
    phiABp = phiAp - phiBp
    if is_show:
        # Uncomment following lines to show the density profile along the z
        # direction. Note both original and interpolated data are shown.
        plt.plot(zz, phiA[Nx/2, Ny/2], '.')
        plt.plot(zz, phiB[Nx/2, Ny/2], '.')
        plt.plot(zz, phiAB[Nx/2, Ny/2], '.')
        plt.plot(zzp, phiAp[Nx/2, Ny/2])
        plt.plot(zzp, phiBp[Nx/2, Ny/2])
        plt.plot(zzp, phiABp[Nx/2, Ny/2])
        plt.show()
        mlab.clf()
        mlab.contour3d(xp, yp, zp, phiABp,
                       contours=32, transparent=True, 
                       colormap='Spectral')
        #src = mlab.pipeline.scalar_field(xp, yp, zp, phiABp)
        #mlab.pipeline.volume(src)
        mlab.show()
    if is_save:
        mlab.clf()
        mlab.clf()
        mlab.contour3d(xp, yp, zp, phiABp,
                       contours=32, transparent=True, colormap='Spectral')
        mlab.savefig('out')


def cheb_interp3d_z(u, vz):
    '''
    u(x,y,z): source data
    vz: vector to be interpolated, size is Nzp
    '''
    Nx, Ny, Nz = u.shape
    Nzp = vz.size
    uout = np.zeros([Nx, Ny, Nzp])
    vzp = np.linspace(-1, 1, Nzp)
    T = cheb_barycentric_matrix(vzp, Nz-1)
    #print Nx, Ny, Nz, Nzp, T.shape, u[0,0].shape
    for i in xrange(Nx):
        for j in xrange(Ny):
            uout[i,j] = np.dot(T, u[i,j])
    return uout


if __name__ == '__main__':
    vis_slab3d()

